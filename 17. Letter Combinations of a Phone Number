//Problem 17: Letter Combinations of a Phone Number

class Solution {
    Map<String,String> hm = new HashMap();
    List<String> res = new ArrayList();
    public List<String> letterCombinations(String digits) {
        if(digits.length() == 0)
            return res;
        else
            backtrack("",digits);
        return res;
    }
    public void backtrack(String combination, String digits)
    {
        //Add letter combinations to the hashmap
        hm.put("2","abc");
        hm.put("3","def");
        hm.put("4","ghi");
        hm.put("5","jkl");
        hm.put("6","mno");
        hm.put("7","pqrs");
        hm.put("8","tuv");
        hm.put("9","wxyz");
        if(digits.length() == 0)
            res.add(combination);
        else
        {
            //Get current digit
            String cur_digit = digits.substring(0,1);
            //For current digit, get the letter combinations from hashmap
            String letters = hm.get(cur_digit);
            //For each letter in the combination, get the pair of possible combinations
            for(int i=0; i<letters.length(); i++)
            {
                String letter = letters.substring(i,i+1);
                backtrack(combination+letter, digits.substring(1));
            }
        }
    }
}
