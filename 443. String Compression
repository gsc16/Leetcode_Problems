//Problem 443: String Compression

class Solution {
    public int compress(char[] chars) {
        if(chars.length == 0 || chars.length == 1)
            return chars.length;
        int idx = 0,cur_len=1;
        for(int i=1; i<chars.length; i++)
        {
            //If previous char is equal to current char, then increment cur_len
            if(chars[i-1] == chars[i])
                cur_len++;
            else
            {
                //Assign prev char to the output and store the count in the next position in the output. If count is greater than 10, then we need 2 places to store count
                chars[idx++] = chars[i-1];
                if(cur_len>1 && cur_len<10)
                    chars[idx++] = (char)(cur_len+'0');
                else if(cur_len >= 10)
                {
                    for(char ch: String.valueOf(cur_len).toCharArray())
                        chars[idx++] = ch;
                }
                cur_len = 1;
            }
        }
        //Finally store the last char and its count. If cur_len =1, then last char occurs only once.
        if(cur_len == 1 && cur_len <10)
        {
            chars[idx++] = chars[chars.length -1];
        }
        else if(cur_len !=1 && cur_len<10)
        {
            chars[idx++] = chars[chars.length -1];
            chars[idx++] = (char)(cur_len + '0');
        }
        else if(cur_len !=1 && cur_len >= 10)
        {
            chars[idx++] = chars[chars.length -1];
            for(char ch: String.valueOf(cur_len).toCharArray())
                        chars[idx++] = ch;
        }
        return idx;
    }
}
